<?php

/**
 * Class InputfieldFontIconPicker
 *
 * @author			: İskender TOTOĞLU, @ukyo (community), @trk (Github)
 * @website			: http://altivebir.com.tr
 * @projectWebsite	: https://github.com/trk/FieldtypeFontIconPicker
 * 
 * @property string $iconLibrary
 * @property string $iconPickerTheme
 * @property integer $iconPickerIconsPerPage
 * @property boolean $iconPickerHasSearch
 * @property boolean $allowEmptyIcon
 * @property string $emptyIconValue
 */
class InputfieldFontIconPicker extends Inputfield
{
	const SELECTOR_CLASS = "AvbIconPicker";

	/**
	 * @var string $moduleURL
	 */
	public $moduleURL;

	/**
	 * @var integer $version
	 */
	public $version;

	/**
	 * @var array $resource
	 */
	public $resource = array(
		"base" => "",
		"filename" => "",
		"name" => "",
		"title" => "",
		"version" => "",
		"styles" => array(),
		"scripts" => array(),
		"categorized" => false,
		"attributes" => array(),
		"categories" => array(),
		"icons" => array()
	);

	/**
	 * @var array $variables
	 */
	protected $variables = array(
		"iconLibrary" => "fieldtypefonticonpicker.fontawesome",
		"iconCategory" => "",
		"iconPickerTheme" => "fip-grey",
		"iconPickerIconsPerPage" => 20,
		"iconPickerHasSearch" => true,
		"allowEmptyIcon" => true,
		"emptyIconValue" => ""
	);

	/**
	 * @var array $attributes
	 */
	public $attributes = array();

	/**
	 * @var string $prefix
	 */
	public $prefix = "";

	/**
	 * @inheritDoc
	 * 
	 * @return array
	 */
	public static function getModuleInfo()
	{
		return array(
			'title' => 'Icon Picker',
			'summary' => __('Font icon picker input for fieldtype font icon picker, allow you to select font-awesome icons'),
			'version' => 201,
			'author' => 'İskender TOTOĞLU | @ukyo(community), @trk (Github), http://altivebir.com.tr',
			'href' => 'https://github.com/trk/FieldtypeFontIconPicker',
			'icon' => 'hand-pointer-o',
			'requires' => array(
				'FieldtypeFontIconPicker',
            )
		);
	}

	/**
	 * @inheritDoc
	 */
	public function __construct()
	{
		parent::__construct();

		// Module : config
		$moduleInfo = $this->getModuleInfo();

		// Module : version
		$this->version = $moduleInfo["version"];

		// Module : url
		$this->moduleURL = $this->wire->config->urls->siteModules . "FieldtypeFontIconPicker";

		// set variables
		foreach ($this->variables as $name => $default) {
			$this->set($name, $default);
		}
	}

	/**
	 * @return void
	 */
	public function init()
	{
		// Icon Picker : core style
		$this->wire->config->styles->add("{$this->moduleURL}/dist/css/base/jquery.fonticonpicker.min.css?v={$this->version}");

		// Icon Picker : core script
		$this->wire->config->scripts->add("{$this->moduleURL}/dist/js/jquery.fonticonpicker.min.js?v={$this->version}");
	}

	/**
	 * @inheritDoc
	 *
	 * @param string $iconLibrary
	 * 
	 * @return array
	 */
	public function resource($iconLibrary = "")
	{
		$iconLibrary = $iconLibrary ?: $this->iconLibrary;

		// get resources
		$resources = $this->wire->modules->get("FieldtypeFontIconPicker")->resources();
		$resource = array();

		if ($iconLibrary && isset($resources[$iconLibrary])) {
			$resource = $resources[$iconLibrary];
			$source = include $resource["file"];
			$resource["icons"] = isset($source["icons"]) ? $source["icons"] : array();
		}

		$resource = array_merge($this->resource, $resource);

		$this->prefix = isset($resource["attributes"]["prefix"]) ? $resource["attributes"]["prefix"] : "";

		return $resource;
	}

	/**
	 * @inheritDoc
	 * 
	 * @param array $resource
	 * 
	 * @return array
	 */
	function getOptions(array $resource = array())
	{
		$resource = $resource ?: $this->resource();

		$icons = isset($resource["icons"]) ? $resource["icons"] : array();

		if (isset($icons[$this->iconCategory]) && isset($icons[$this->iconCategory]["icons"])) {
			$icons = $icons[$this->iconCategory]["icons"];
		}
		
		$options = array();
		
		foreach ($icons as $index => $value) {

			if (is_array($value)) {
				$title = isset($value["title"]) ? $value["title"] : $index;
				$options[$title] = array();
				foreach (isset($value["icons"]) ? $value["icons"] : array() as $i => $val) {
					$val = $this->prefix . $val;
					$options[$title][$val] = $val;
				}
			} else {
				$value = $this->prefix . $value;
				$options[$value] = $value;
			}

		}

		return $options;
	}

	/**
	 * @inheritDoc
	 */
	protected function ready()
	{
		// Icon Picker : theme style
		switch ($this->iconPickerTheme) {
			case "fip-grey":
				$this->wire->config->styles->append("{$this->moduleURL}/dist/css/themes/grey-theme/jquery.fonticonpicker.grey.min.css?v={$this->version}");
			break;
			case "fip-darkgrey":
				$this->wire->config->styles->append("{$this->moduleURL}/dist/css/themes/dark-grey-theme/jquery.fonticonpicker.darkgrey.min.css?v={$this->version}");
			break;
			case "fip-bootstrap":
				$this->wire->config->styles->append("{$this->moduleURL}/dist/css/themes/bootstrap-theme/jquery.fonticonpicker.bootstrap.min.css?v={$this->version}");
			break;
			case "fip-inverted":
				$this->wire->config->styles->append("{$this->moduleURL}/dist/css/themes/inverted-theme/jquery.fonticonpicker.inverted.min.css?v={$this->version}");
			break;
		}

		// Resource
		$resource = $this->resource();

		// Icon Picker : resource styles
		foreach ($resource["styles"] as $index => $style) {
			$this->wire->config->styles->append("{$style}?v={$this->version}");
		}

		// Icon Picker : resource scripts
		/*
		foreach ($resource["scripts"] as $index => $script) {
			$this->wire->config->scripts->append("{$script}?v={$this->version}");
		}
		*/
	
	}

	/**
	 * @inheritDoc
	 * 
	 * @return string
	 */
	public function ___render()
	{

		$this->ready();

		$resource = $this->resource();

		/** @var InputfieldSelect $select */
		$select = $this->wire->modules->get("InputfieldSelect");
		$select->set("name", $this->attr("name"));
		$select->set("class", self::SELECTOR_CLASS);
		$select->addOption("", __("No Icon"));
		$select->addOptions($this->getOptions());
		$select->attr("prefix", $this->prefix);
		$select->attr("theme", $this->iconPickerTheme);
		$select->attr("category", $this->iconCategory);
		$select->attr("icons-per-page", $this->iconPickerIconsPerPage);
		$select->attr("empty-icon", $this->allowEmptyIcon ? "true" : "false");
		$select->attr("has-search", $this->iconPickerHasSearch ? "true" : "false");

		// set attributes
		foreach ($resource["attributes"] as $attribute => $attributeValue) {
			
			if (is_bool($attributeValue)) {
				$attributeValue = $attributeValue ? "true" : "false";
			}

			$select->attr($attribute, $attributeValue);
		}

		$select->attr("all-category-text", $this->_("From all categories", __FILE__));
		$select->attr("un-categorized-text", $this->_("Uncategorized", __FILE__));

		$select->value = $this->prefix . $this->attr("value");

		// Add scripts
		$output  = "<script>";
		foreach ($resource["scripts"] as $index => $script) {
			$name = md5($script);
			$output .= "Altivebir.ScriptLoader.Add('{$name}', '{$script}');";
		}
		$output .= "</script>";

		return $select->render() . $output;
	}

	/**
	 * @inheritDoc
	 *
	 * @return InputfieldWrapper
	 */
	public function ___getConfigInputfields()
	{
		$wrapper = parent::___getConfigInputfields();

		$resource = $this->resource($this->iconLibrary);

		// Icon: library select
		/** @var InputfieldSelect $field */
		$field = $this->wire->modules->get("InputfieldSelect");
		$field->attr("name", "iconLibrary");
		$field->label = __("Icon library");
		$field->description = __("Select icon library you want to use for this input.");
		$field->notes = "";
		// get resources
		$resources = $this->wire->modules->get("FieldtypeFontIconPicker")->resources();
		foreach ($resources as $name => $options) {
			$field->addOption($name, "{$options["title"]} ({$options["base"]})");
		}
		$field->required = true;
		$field->defaultValue = "fieldtypefonticonpicker.fontawesome";
		$field->value = $this->iconLibrary;
		$wrapper->append($field);

		/** @var InputfieldMarkup $field */
		/*
		$field = $this->wire->modules->get("InputfieldMarkup");

		$table = "<table class='uk-table uk-table-striped'>";
		$table .= "<thead>";
		$table .= "<th></th>";
		$table .= "<th></th>";
		$table .= "</thead>";
		$table .= "<tbody>";
		$table .= "<tr>";
		$table .= "<th>Base</th>";
		$table .= "<th>{$resource['base']}</th>";
		$table .= "</tr>";
		$table .= "<tr>";
		$table .= "<th>Filename</th>";
		$table .= "<th>{$resource['filename']}</th>";
		$table .= "</tr>";
		$table .= "<tr>";
		$table .= "<th>Name</th>";
		$table .= "<th>{$resource['name']}</th>";
		$table .= "</tr>";
		$table .= "<tr>";
		$table .= "<th>Title</th>";
		$table .= "<th>{$resource['title']}</th>";
		$table .= "</tr>";
		$table .= "<tr>";
		$table .= "<th>Version</th>";
		$table .= "<th>{$resource['version']}</th>";
		$table .= "</tr>";
		$table .= "<tr>";
		$table .= "<th>Categories</th>";
		$table .= "<th>" . count($resource["categories"]) . "</th>";
		$table .= "</tr>";
		$table .= "<tr>";
		$table .= "<th>Icons</th>";
		$table .= "<th>" . count($resource["icons"]) . "</th>";
		$table .= "</tr>";
		$table .= "</tbody>";
		$table .= "</table>";

		$field->value = $table;

		$wrapper->append($field);
		*/

		// Icon : category select
		if ($resource["categorized"]) {
			/** @var InputfieldSelect $field */
			$field = $this->modules->get("InputfieldSelect");
			$field->attr("name", "iconCategory");
			$field->label = __("Icon Category");
			$field->description = __("Select an icon category, if you want a specified category for show.");
			foreach($resource["icons"] as $value => $name) {
				$field->addOption($value, $name["title"]);
			}
			$field->value = $this->iconCategory;
			$wrapper->append($field);
		}

		// Icon Picker: theme select
		/** @var InputfieldSelect $field */
		$field = $this->modules->get("InputfieldSelect");
		$field->attr("name", "iconPickerTheme");
		$field->label = __("Icon Picker Theme");
		$field->description = __("The theme to be used with the InputfieldFontIconPicker.");
		$field->addOption("fip-grey", __("The default theme"));
		$field->addOption("fip-darkgrey", __("A deeper shade of the grey theme"));
		$field->addOption("fip-bootstrap", __("A nice icon picker theme"));
		$field->addOption("fip-inverted", __("Inverted color scheme"));
		$field->required = true;
		$field->defaultValue = "flip-grey";
		$field->value = $this->iconPickerTheme;
		$wrapper->append($field);

		// Icon Picker : Icon Per Page
		/** @var InputfieldInteger $field */
		$field = $this->modules->get("InputfieldInteger");
		$field->attr("name", "iconPickerIconsPerPage");
		$field->label = __("Icon Per Page");
		$field->description = __("Number of icons per page on the icon picker. Please note that if you have empty icon set to `enable` then the actual number will be one less. For better appearance always provide a number in multiple of 5.");
		$field->set("inputType", "number");
		$field->value = $this->iconPickerIconsPerPage;
		$field->columnWidth = 50;
		$wrapper->append($field);

		// Icon Picker : Has Search ?
		/** @var InputfieldRadios $field */
		$field = $this->modules->get("InputfieldRadios");
		$field->set("name", "iconPickerHasSearch");
		$field->label = __("Has Search");
		$field->description = __("Whether or not to show the search bar. The search result is always non case sensitive. When the fontIconPicker is initiated on a SELECT element, the option labels (or HTML) are used for search, not the option values.");
		$field->addOption(1, __("Enable"));
		$field->addOption(0, __("Disable"));
		$field->value = $this->iconPickerHasSearch;
		$field->columnWidth = 50;
		$wrapper->add($field);

		// Icon Picker : Allow Empty Icon
		/** @var InputfieldRadios $field */
		$field = $this->modules->get("InputfieldRadios");
		$field->attr("name", "allowEmptyIcon");
		$field->label = __("Allow Empty Icon ?");
		$field->description = __("Whether or not empty icon should be shown on the icon picker. If you give your users the option to pick no icon, then leave it enabled.");
		$field->addOption(1, __("Enable"));
		$field->addOption(0, __("Disable"));
		$field->value = $this->allowEmptyIcon;
		$field->columnWidth = 50;
		$wrapper->append($field);

		// Icon Picker : Empty Icon Value
		/** @var InputfieldText $field */
		$field = $this->modules->get("InputfieldText");
		$field->set("name", "emptyIconValue");
		$field->label = __("Empty Icon Value");
		$field->description = __("What should be the value of the INPUT or SELECT field when no icon is selected. This is only used when emptyIcon is set to true.");
		$field->value = $this->emptyIconValue;
		$field->columnWidth = 50;
		$wrapper->append($field);

		return $wrapper;
	}
}
